import hashlib
import time
import json
import random
import asyncio
import ecdsa
import base58
from typing import List, Dict, Any
from dataclasses import dataclass, asdict
from abc import ABC, abstractmethod

@dataclass
class Transaction:
    sender: str
    recipient: str
    amount: float
    signature: str = ""

    def to_dict(self):
        return asdict(self)

    def calculate_hash(self):
        return hashlib.sha256(json.dumps(self.to_dict(), sort_keys=True).encode()).hexdigest()

    def sign(self, private_key):
        self.signature = private_key.sign(self.calculate_hash().encode()).hex()

    def verify(self, public_key):
        return public_key.verify(bytes.fromhex(self.signature), self.calculate_hash().encode())

class MerkleTree:
    def __init__(self, transactions: List[Transaction]):
        self.transactions = transactions
        self.tree = self.build_tree()

    def build_tree(self):
        leaves = [t.calculate_hash() for t in self.transactions]
        if len(leaves) % 2 == 1:
            leaves.append(leaves[-1])
        tree = [leaves]
        while len(tree[-1]) > 1:
            level = []
            for i in range(0, len(tree[-1]), 2):
                level.append(hashlib.sha256((tree[-1][i] + tree[-1][i+1]).encode()).hexdigest())
            tree.append(level)
        return tree

    def get_root(self):
        return self.tree[-1][0]

    def get_proof(self, transaction):
        index = self.transactions.index(transaction)
        proof = []
        for i in range(len(self.tree) - 1):
            sibling_index = index + 1 if index % 2 == 0 else index - 1
            if sibling_index < len(self.tree[i]):
                proof.append(('left' if index % 2 == 1 else 'right', self.tree[i][sibling_index]))
            index //= 2
        return proof

@dataclass
class Block:
    index: int
    transactions: List[Transaction]
    timestamp: float
    previous_hash: str
    nonce: int = 0
    hash: str = ""
    merkle_root: str = ""

    def __post_init__(self):
        self.merkle_tree = MerkleTree(self.transactions)
        self.merkle_root = self.merkle_tree.get_root()

    def calculate_hash(self):
        block_dict = asdict(self)
        block_dict.pop('hash', None)
        return hashlib.sha256(json.dumps(block_dict, sort_keys=True).encode()).hexdigest()

    def mine_block(self, difficulty: int):
        target = "0" * difficulty
        while self.hash[:difficulty] != target:
            self.nonce += 1
            self.hash = self.calculate_hash()
        return self

class SmartContract(ABC):
    @abstractmethod
    def execute(self, context: Dict[str, Any]) -> bool:
        pass

class TokenSwapContract(SmartContract):
    def __init__(self, token_a: str, token_b: str, rate: float):
        self.token_a = token_a
        self.token_b = token_b
        self.rate = rate

    def execute(self, context: Dict[str, Any]) -> bool:
        if context['token'] == self.token_a:
            context['balances'][self.token_b] += context['amount'] * self.rate
            context['balances'][self.token_a] -= context['amount']
        elif context['token'] == self.token_b:
            context['balances'][self.token_a] += context['amount'] / self.rate
            context['balances'][self.token_b] -= context['amount']
        else:
            return False
        return True

class StakingContract(SmartContract):
    def __init__(self, staking_period: int, reward_rate: float):
        self.staking_period = staking_period
        self.reward_rate = reward_rate
        self.stakes: Dict[str, Dict[str, Any]] = {}

    def execute(self, context: Dict[str, Any]) -> bool:
        action = context.get('action')
        if action == 'stake':
            self.stakes[context['address']] = {
                'amount': context['amount'],
                'timestamp': context['timestamp']
            }
            context['balances']['staked'] += context['amount']
            return True
        elif action == 'unstake':
            if context['address'] in self.stakes:
                stake = self.stakes[context['address']]
                if context['timestamp'] - stake['timestamp'] >= self.staking_period:
                    reward = stake['amount'] * self.reward_rate
                    context['balances']['unstaked'] += stake['amount'] + reward
                    context['balances']['staked'] -= stake['amount']
                    del self.stakes[context['address']]
                    return True
        return False

class PiNetwork:
    def __init__(self, difficulty: int = 4):
        self.chain: List[Block] = []
        self.pending_transactions: List[Transaction] = []
        self.nodes: List[str] = []
        self.difficulty = difficulty
        self.contracts: Dict[str, SmartContract] = {}
        self.create_genesis_block()

    def create_genesis_block(self):
        genesis_block = Block(0, [], time.time(), "0")
        genesis_block.hash = genesis_block.calculate_hash()
        self.chain.append(genesis_block)

    def add_node(self, address: str):
        self.nodes.append(address)

    def get_latest_block(self) -> Block:
        return self.chain[-1]

    def add_transaction(self, transaction: Transaction):
        self.pending_transactions.append(transaction)

    def mine_pending_transactions(self, miner_address: str):
        block = Block(len(self.chain), self.pending_transactions, time.time(), self.get_latest_block().hash)
        block.mine_block(self.difficulty)
        self.chain.append(block)
        self.pending_transactions = [
            Transaction(None, miner_address, 1)  # Mining reward
        ]

    def is_chain_valid(self) -> bool:
        for i in range(1, len(self.chain)):
            current_block = self.chain[i]
            previous_block = self.chain[i-1]
            if current_block.hash != current_block.calculate_hash():
                return False
            if current_block.previous_hash != previous_block.hash:
                return False
        return True

    def resolve_conflicts(self) -> bool:
        new_chain = None
        max_length = len(self.chain)
        for node in self.nodes:
            response = self.get_chain_from_node(node)
            if response and len(response) > max_length and self.is_valid_chain(response):
                new_chain = response
                max_length = len(response)
        if new_chain:
            self.chain = new_chain
            return True
        return False

    def is_valid_chain(self, chain: List[Block]) -> bool:
        # Implement chain validation logic
        return True

    def get_chain_from_node(self, node: str) -> List[Block]:
        # Implement node communication logic
        return []

    def deploy_contract(self, name: str, contract: SmartContract):
        self.contracts[name] = contract

    def execute_contract(self, name: str, context: Dict[str, Any]) -> bool:
        if name in self.contracts:
            return self.contracts[name].execute(context)
        return False

class Wallet:
    def __init__(self):
        self.private_key = ecdsa.SigningKey.generate(curve=ecdsa.SECP256k1)
        self.public_key = self.private_key.get_verifying_key()
        self.address = self.generate_address()

    def generate_address(self):
        public_key_bytes = self.public_key.to_string()
        sha256_bpk = hashlib.sha256(public_key_bytes).digest()
        ripemd160_bpk = hashlib.new('ripemd160', sha256_bpk).digest()
        return base58.b58encode(ripemd160_bpk).decode('utf-8')

    def sign_transaction(self, transaction: Transaction):
        transaction.sign(self.private_key)

async def simulate_network():
    pi_network = PiNetwork()
    wallets = [Wallet() for _ in range(3)]

    # Deploy smart contracts
    token_swap = TokenSwapContract("PI", "USD", 0.5)
    staking = StakingContract(100, 0.1)
    pi_network.deploy_contract("token_swap", token_swap)
    pi_network.deploy_contract("staking", staking)

    # Simulate transactions and mining
    for _ in range(5):
        sender = random.choice(wallets)
        recipient = random.choice(wallets)
        amount = random.uniform(1, 10)
        transaction = Transaction(sender.address, recipient.address, amount)
        sender.sign_transaction(transaction)
        pi_network.add_transaction(transaction)

        if len(pi_network.pending_transactions) >= 3:
            pi_network.mine_pending_transactions(random.choice(wallets).address)

    # Simulate contract interactions
    swap_context = {
        "token": "PI",
        "amount": 100,
        "balances": {"PI": 1000, "USD": 1000}
    }
    pi_network.execute_contract("token_swap", swap_context)

    stake_context = {
        "action": "stake",
        "address": wallets[0].address,
        "amount": 50,
        "timestamp": time.time(),
        "balances": {"staked": 0, "unstaked": 1000}
    }
    pi_network.execute_contract("staking", stake_context)

    # Print final state
    print(f"Blockchain length: {len(pi_network.chain)}")
    print(f"Last block hash: {pi_network.get_latest_block().hash}")
    print(f"Chain valid: {pi_network.is_chain_valid()}")

if __name__ == "__main__":
    asyncio.run(simulate_network())
